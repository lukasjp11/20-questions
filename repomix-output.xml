This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
public/
  index.html
  manifest.json
src/
  components/
    ActionButtons.js
    AnswerBox.js
    CategorySelector.js
    CluesGrid.js
    Game.js
    Instructions.js
    LoadingScreen.js
    SettingsPage.js
    Timer.js
  context/
    GameContext.js
  utils/
    api.js
    gameLogic.js
    prompts.js
  App.css
  App.js
  index.css
  index.js
.env.production
.gitignore
package.json
postcss.config.js
tailwind.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/index.html">
<!DOCTYPE html>
<html lang="da">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="20 Questions - Et trivia-spil med AI-genererede ledetråde"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <title>20 Questions</title>
  </head>
  <body>
    <noscript>Du skal aktivere JavaScript for at køre denne app.</noscript>
    <div id="root"></div>
  </body>
</html>
</file>

<file path="public/manifest.json">
{
  "short_name": "20 Questions",
  "name": "20 Questions",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}
</file>

<file path="src/components/ActionButtons.js">
import React from 'react';
import { Shuffle } from 'lucide-react';

const ActionButtons = ({ onRandomCategory, loading }) => {
  return (
    <div className="mb-6">
      <button
        onClick={onRandomCategory}
        disabled={loading}
        className="
          w-full px-6 py-2.5 
          bg-gradient-to-r from-green-600 to-emerald-600 
          hover:from-green-700 hover:to-emerald-700
          text-white rounded-lg flex items-center justify-center gap-2
          disabled:opacity-50 transition-all
          transform active:scale-95 hover:scale-[1.02]
          shadow-md hover:shadow-lg
        "
        aria-label="Generer kort fra tilfældig kategori"
      >
        <Shuffle className="w-4 h-4" />
        Tilfældig kategori
      </button>
    </div>
  );
};

export default ActionButtons;
</file>

<file path="src/components/AnswerBox.js">
import React from 'react';
import { Eye, EyeOff } from 'lucide-react';

const AnswerBox = ({ currentItem, showAnswer, setShowAnswer }) => {
  if (!currentItem) return null;

  return (
    <button
      onClick={() => setShowAnswer(!showAnswer)}
      className="
        w-full mb-6 p-4 bg-white dark:bg-gray-700
        rounded-lg transition-all text-left
        hover:bg-gray-100 dark:hover:bg-gray-600
        transform hover:scale-[1.01] active:scale-[0.99]
        border border-gray-200 dark:border-transparent
      "
      aria-label={showAnswer ? 'Skjul svar' : 'Vis svar'}
    >
      <div className="flex items-center justify-between gap-4">
        <div className="flex items-baseline gap-2 flex-wrap">
          <span className="text-sm text-gray-500 dark:text-gray-400">Svar:</span>
          {showAnswer ? (
            <span className="text-xl md:text-2xl font-bold text-gray-900 dark:text-white">
              {currentItem}
            </span>
          ) : (
            <span className="text-xl md:text-2xl font-bold text-gray-400 dark:text-gray-500">
              • • • • •
            </span>
          )}
        </div>
        <div className="flex-shrink-0 text-gray-500 dark:text-gray-400">
          {showAnswer ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
        </div>
      </div>
    </button>
  );
};

export default AnswerBox;
</file>

<file path="src/components/CategorySelector.js">
import React from 'react';
import { categories } from '../utils/prompts';
import { getUsedItemsInCategory } from '../utils/gameLogic';

const CategorySelector = ({ 
  currentCategory, 
  onCategorySelect, 
  loading, 
  usedItems 
}) => {
  return (
    <div className="mb-6">
      <div className="grid grid-cols-2 md:grid-cols-4 gap-2 md:gap-3">
        {Object.entries(categories).map(([key, category]) => {
          const Icon = category.icon;
          const usedCount = getUsedItemsInCategory(usedItems, key);
          const isActive = currentCategory === key;
          
          return (
            <button 
              key={key} 
              onClick={() => onCategorySelect(key)} 
              disabled={loading}
              className={`
                relative p-3 md:p-4 rounded-lg flex flex-col items-center 
                transition-all transform hover:scale-105
                ${isActive 
                  ? `bg-gradient-to-br ${category.gradient} shadow-lg text-white` 
                  : 'bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300'
                }
                ${loading ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}
                border border-gray-200 dark:border-transparent
              `}
              aria-label={`Select ${category.name} category`}
            >
              <Icon className="w-6 h-6 md:w-8 md:h-8 mb-1" />
              <span className="text-sm md:text-base font-medium">
                {category.name}
              </span>
              {usedCount > 0 && (
                <span className="absolute top-1 right-1 text-xs bg-gray-800 dark:bg-gray-900 text-white px-1.5 py-0.5 rounded-full">
                  {usedCount}
                </span>
              )}
            </button>
          );
        })}
      </div>
    </div>
  );
};

export default CategorySelector;
</file>

<file path="src/components/CluesGrid.js">
import React, { memo, useCallback } from 'react';
import { CheckCircle, Circle } from 'lucide-react';
import { isSpecialClue } from '../utils/gameLogic';

const ClueButton = memo(({ clue, index, isRevealed, onClick }) => {
  const isSpecial = isSpecialClue(clue);
  
  const handleClick = useCallback(() => {
    onClick(index);
  }, [onClick, index]);
  
  return (
    <button
      onClick={handleClick}
      className={`
        p-3 rounded-lg transition-all text-left
        ${isRevealed 
          ? (isSpecial 
            ? 'bg-purple-100 dark:bg-purple-900/30 border border-purple-300 dark:border-purple-700' 
            : 'bg-gray-100 dark:bg-gray-700 border border-gray-200 dark:border-transparent'
          ) 
          : 'bg-gray-50 dark:bg-gray-700/50 hover:bg-gray-100 dark:hover:bg-gray-700 border border-gray-200 dark:border-transparent'
        }
        transform hover:scale-[1.02] active:scale-[0.98]
      `}
      aria-label={`Clue ${index + 1} ${isRevealed ? '(revealed)' : '(hidden)'}`}
    >
      <div className="flex items-center gap-2">
        {isRevealed ? (
          <CheckCircle className="w-4 h-4 text-green-500 flex-shrink-0" />
        ) : (
          <Circle className="w-4 h-4 text-gray-500 flex-shrink-0" />
        )}
        <span className="font-semibold text-gray-600 dark:text-gray-400">
          #{index + 1}
        </span>
        {isRevealed && (
          <span className={`flex-1 text-sm ${isSpecial ? 'text-purple-600 dark:text-purple-300' : 'text-gray-700 dark:text-gray-300'}`}>
            {clue}
          </span>
        )}
      </div>
    </button>
  );
});

ClueButton.displayName = 'ClueButton';

const CluesGrid = memo(({ clues, revealedClues, onClueClick }) => {
  if (clues.length === 0) return null;

  return (
    <div className="space-y-2">
      <div className="flex justify-between items-center mb-2">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Ledetråde</h3>
        <span className="text-sm text-gray-500 dark:text-gray-400">
          {revealedClues.length} / {clues.length} afsløret
        </span>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
        {clues.map((clue, index) => (
          <ClueButton
            key={index}
            clue={clue}
            index={index}
            isRevealed={revealedClues.includes(index)}
            onClick={onClueClick}
          />
        ))}
      </div>
    </div>
  );
});

CluesGrid.displayName = 'CluesGrid';

export default CluesGrid;
</file>

<file path="src/components/Game.js">
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { AlertTriangle, Settings } from 'lucide-react';
import { getPrompt } from '../utils/prompts';
import { shuffleArray } from '../utils/gameLogic';
import { useGame } from '../context/GameContext';
import CategorySelector from './CategorySelector';
import AnswerBox from './AnswerBox';
import ActionButtons from './ActionButtons';
import CluesGrid from './CluesGrid';
import Instructions from './Instructions';
import LoadingScreen from './LoadingScreen';
import Timer from './Timer';
import { generateCluesWithProgress } from '../utils/api';

const Game = ({ theme }) => {
  const {
    difficulty,
    customTheme,
    hideAnswerOnGeneration,
    numberOfClues,
    enableTimer,
    timePerClue,
    categories,
    usedItems,
    addUsedItem,
    currentGameState,
    saveGameState,
    clearGameState
  } = useGame();

  // Initialize state from saved game state or defaults
  const [currentCategory, setCurrentCategory] = useState(currentGameState?.currentCategory || 'person');
  const [currentItem, setCurrentItem] = useState(currentGameState?.currentItem || '');
  const [clues, setClues] = useState(currentGameState?.clues || []);
  const [revealedClues, setRevealedClues] = useState(currentGameState?.revealedClues || []);
  const [loading, setLoading] = useState(false);
  const [loadingCategory, setLoadingCategory] = useState('');
  const [error, setError] = useState('');
  const [showAnswer, setShowAnswer] = useState(currentGameState?.showAnswer ?? true);
  const [timerPaused, setTimerPaused] = useState(true);
  const [timerResetTrigger, setTimerResetTrigger] = useState(0);

  // Save game state whenever it changes (but not during loading)
  useEffect(() => {
    if (currentItem && !loading) {
      saveGameState({
        currentCategory,
        currentItem,
        clues,
        revealedClues,
        showAnswer
      });
    }
  }, [currentCategory, currentItem, clues, revealedClues, showAnswer, loading, saveGameState]);

  const generateCard = async (category) => {
    setLoading(true);
    setLoadingCategory(category);
    setError('');
    setRevealedClues([]);
    setShowAnswer(!hideAnswerOnGeneration);
    setTimerPaused(true);
    setTimerResetTrigger(prev => prev + 1);
    
    clearGameState();

    try {
      const prompt = getPrompt(category, difficulty, usedItems, customTheme, numberOfClues);
      
      // Use streaming API
      const result = await generateCluesWithProgress(prompt, {
        onItemFound: (item) => {
          // As soon as we have the item, set it (this happens very fast)
          setCurrentItem(item);
          if (!hideAnswerOnGeneration) {
            setShowAnswer(true);
          }
        },
        onComplete: (result) => {
          // When fully complete, set the clues
          const shuffledClues = shuffleArray(result.clues.slice(0, numberOfClues));
          setClues(shuffledClues);
        }
      });
      
      setCurrentCategory(category);
      addUsedItem(category, result.item);
      
    } catch (err) {
      setError(err.message || 'En fejl opstod. Prøv igen.');
      console.error('Generation error:', err);
    } finally {
      setLoading(false);
    }
  };

  const toggleClue = (index) => {
    setRevealedClues(prev => {
      if (prev.includes(index)) {
        return prev.filter(i => i !== index);
      } else {
        // Always reset timer when revealing a new clue
        if (enableTimer) {
          setTimerResetTrigger(trigger => trigger + 1);
          setTimerPaused(false);
        }
        return [...prev, index];
      }
    });
  };

  const handleTimeUp = () => {
    setTimerPaused(true);
  };

  const pickRandomCategory = () => {
    const keys = Object.keys(categories);
    const randomKey = keys[Math.floor(Math.random() * keys.length)];
    generateCard(randomKey);
  };

  const getCategoryName = (key) => {
    return categories[key]?.name || key;
  };

  return (
    <>
      {loading && <LoadingScreen category={getCategoryName(loadingCategory)} />}

      <div className={`min-h-screen ${theme === 'dark' ? 'bg-gray-900' : 'bg-gray-50'} text-gray-900 dark:text-white p-4 md:p-8`}>
        <div className="max-w-4xl mx-auto">
          <div className="mb-6 flex justify-between items-center">
            <h1 className="text-2xl md:text-4xl font-bold">20 Questions</h1>
            <Link
              to="/settings"
              className="p-2 rounded-lg bg-gray-200 dark:bg-gray-800 hover:bg-gray-300 dark:hover:bg-gray-700 transition-colors"
            >
              <Settings className="w-5 h-5" />
            </Link>
          </div>

          <div className="bg-white dark:bg-gray-800 rounded-xl p-4 md:p-6 shadow-lg">
            <CategorySelector
              currentCategory={currentCategory}
              onCategorySelect={generateCard}
              loading={loading}
              usedItems={usedItems}
            />

            <AnswerBox
              currentItem={currentItem}
              showAnswer={showAnswer}
              setShowAnswer={setShowAnswer}
            />

            {enableTimer && currentItem && revealedClues.length > 0 && (
              <Timer
                timePerClue={timePerClue}
                onTimeUp={handleTimeUp}
                isPaused={timerPaused || revealedClues.length === clues.length}
                resetTrigger={timerResetTrigger}
              />
            )}

            {currentItem && (
              <ActionButtons
                onRandomCategory={pickRandomCategory}
                loading={loading}
              />
            )}

            {error && (
              <div className="mb-4 p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-700 rounded-lg flex items-center text-red-600 dark:text-red-400 text-sm">
                <AlertTriangle className="mr-2 w-4 h-4 flex-shrink-0" />
                <span>{error}</span>
              </div>
            )}

            <CluesGrid
              clues={clues}
              revealedClues={revealedClues}
              onClueClick={toggleClue}
            />

            {!currentItem && !loading && (
              <Instructions onStartRandom={pickRandomCategory} />
            )}
          </div>

          {customTheme && (
            <div className="mt-4 text-center text-sm text-gray-500 dark:text-gray-400">
              Tema: {customTheme}
            </div>
          )}
        </div>
      </div>
    </>
  );
};

export default Game;
</file>

<file path="src/components/Instructions.js">
import React from 'react';
import { Shuffle } from 'lucide-react';

const Instructions = ({ onStartRandom }) => {
  return (
    <div className="text-center py-16">
      <p className="text-gray-500 dark:text-gray-400 mb-6 text-lg">
        Vælg en kategori ovenfor
      </p>
      <span className="text-gray-400 dark:text-gray-500 mb-6 block">eller</span>
      <button
        onClick={onStartRandom}
        className="
          px-8 py-4 
          bg-gradient-to-r from-blue-600 to-purple-600 
          hover:from-blue-700 hover:to-purple-700 
          text-white rounded-lg font-medium text-lg
          transform transition-all hover:scale-105 active:scale-95
          shadow-lg hover:shadow-xl
          flex items-center gap-3 mx-auto
        "
      >
        <Shuffle className="w-5 h-5" />
        Start med tilfældig kategori
      </button>
    </div>
  );
};

export default Instructions;
</file>

<file path="src/components/LoadingScreen.js">
import React from 'react';
import { Sparkles } from 'lucide-react';

const LoadingScreen = ({ category }) => {
  return (
    <div className="fixed inset-0 bg-gray-900/90 dark:bg-gray-900/95 z-50 flex items-center justify-center backdrop-blur-sm">
      <div className="text-center">
        <div className="relative mb-8">
          <Sparkles className="w-16 h-16 text-blue-500 animate-pulse mx-auto" />
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="w-24 h-24 border-4 border-blue-500/20 rounded-full animate-spin" />
          </div>
        </div>
        
        <h2 className="text-2xl font-bold text-white dark:text-gray-100 mb-2">
          Genererer nyt spørgsmål
        </h2>
        <p className="text-gray-300 dark:text-gray-400">
          Finder det perfekte emne i kategorien "{category}"
        </p>
        
        <div className="flex justify-center gap-2 mt-8">
          <div className="w-3 h-3 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0ms' }} />
          <div className="w-3 h-3 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '150ms' }} />
          <div className="w-3 h-3 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '300ms' }} />
        </div>
      </div>
    </div>
  );
};

export default LoadingScreen;
</file>

<file path="src/components/SettingsPage.js">
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  ArrowLeft, 
  Save, 
  Trash2, 
  Plus, 
  X,
  Clock,
  Palette,
  Grid,
  Sliders,
  Sparkles
} from 'lucide-react';
import { useGame } from '../context/GameContext';
import { getDifficultyLabel, getDifficultyDescription } from '../utils/prompts';

const SettingsPage = ({ theme, setTheme }) => {
  const navigate = useNavigate();
  const {
    difficulty,
    customTheme,
    hideAnswerOnGeneration,
    numberOfClues,
    enableTimer,
    timePerClue,
    categories,
    updateSetting,
    resetUsedItems,
    resetAllData,
    usedItems
  } = useGame();

  const [localSettings, setLocalSettings] = useState({
    difficulty,
    customTheme,
    hideAnswerOnGeneration,
    numberOfClues,
    enableTimer,
    timePerClue,
    categories: { ...categories }
  });

  const [showAddCategory, setShowAddCategory] = useState(false);
  const [newCategory, setNewCategory] = useState({ key: '', name: '', description: '' });
  const [hasChanges, setHasChanges] = useState(false);

  const handleLocalChange = (key, value) => {
    setLocalSettings(prev => ({ ...prev, [key]: value }));
    setHasChanges(true);
  };

  const handleSaveSettings = () => {
    Object.entries(localSettings).forEach(([key, value]) => {
      if (key === 'categories') {
        updateSetting('customCategories', value);
      } else {
        updateSetting(key, value);
      }
    });
    setHasChanges(false);
    navigate(-1); // Go back to previous page instead of always going home
  };

  const handleAddCategory = () => {
    if (newCategory.key && newCategory.name) {
      const updatedCategories = {
        ...localSettings.categories,
        [newCategory.key]: {
          name: newCategory.name,
          description: newCategory.description || 'Brugerdefineret kategori',
          custom: true,
          icon: Sparkles,
          gradient: 'from-gray-600 to-gray-700'
        }
      };
      handleLocalChange('categories', updatedCategories);
      setNewCategory({ key: '', name: '', description: '' });
      setShowAddCategory(false);
    }
  };

  const handleRemoveCategory = (key) => {
    if (window.confirm(`Er du sikker på at du vil fjerne kategorien "${localSettings.categories[key].name}"?`)) {
      const { [key]: removed, ...remaining } = localSettings.categories;
      handleLocalChange('categories', remaining);
    }
  };

  return (
    <div className={`min-h-screen ${theme === 'dark' ? 'bg-gray-900' : 'bg-gray-50'} text-gray-900 dark:text-white`}>
      <div className="max-w-4xl mx-auto p-4 md:p-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center gap-4">
            <button 
              onClick={() => navigate(-1)}
              className="p-2 rounded-lg bg-gray-200 dark:bg-gray-800 hover:bg-gray-300 dark:hover:bg-gray-700 transition-colors"
            >
              <ArrowLeft className="w-5 h-5" />
            </button>
            <h1 className="text-2xl md:text-3xl font-bold">Indstillinger</h1>
          </div>
          {hasChanges && (
            <button
              onClick={handleSaveSettings}
              className="flex items-center gap-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors"
            >
              <Save className="w-4 h-4" />
              Gem ændringer
            </button>
          )}
        </div>

        {/* Settings sections */}
        <div className="space-y-6">
          {/* Appearance */}
          <section className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg">
            <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
              <Palette className="w-5 h-5" />
              Udseende
            </h2>
            
            <div className="space-y-4">
              <label className="flex items-center justify-between p-3 rounded-lg bg-gray-50 dark:bg-gray-700/50">
                <span className="font-medium">Mørk tema</span>
                <button
                  onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-all ${
                    theme === 'dark' ? 'bg-green-500' : 'bg-gray-300'
                  }`}
                >
                  <span className={`inline-block h-4 w-4 rounded-full bg-white transform transition-transform ${
                    theme === 'dark' ? 'translate-x-6' : 'translate-x-1'
                  }`} />
                </button>
              </label>

              <label className="flex items-center justify-between p-3 rounded-lg bg-gray-50 dark:bg-gray-700/50">
                <span className="font-medium">Skjul svar ved generering</span>
                <button
                  onClick={() => handleLocalChange('hideAnswerOnGeneration', !localSettings.hideAnswerOnGeneration)}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-all ${
                    localSettings.hideAnswerOnGeneration ? 'bg-green-500' : 'bg-gray-300'
                  }`}
                >
                  <span className={`inline-block h-4 w-4 rounded-full bg-white transform transition-transform ${
                    localSettings.hideAnswerOnGeneration ? 'translate-x-6' : 'translate-x-1'
                  }`} />
                </button>
              </label>
            </div>
          </section>

          {/* Game Rules */}
          <section className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg">
            <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
              <Sliders className="w-5 h-5" />
              Spilregler
            </h2>

            <div className="space-y-6">
              <div>
                <div className="flex justify-between items-center mb-2">
                  <span className="font-medium">Sværhedsgrad: {getDifficultyLabel(localSettings.difficulty)}</span>
                  <span className="text-sm text-gray-500">{localSettings.difficulty}%</span>
                </div>
                <input
                  type="range"
                  min="0"
                  max="100"
                  value={localSettings.difficulty}
                  onChange={e => handleLocalChange('difficulty', parseInt(e.target.value))}
                  className="w-full h-2 bg-gray-200 dark:bg-gray-700 rounded-lg appearance-none cursor-pointer"
                  style={{ 
                    background: `linear-gradient(to right, #3b82f6 0%, #3b82f6 ${localSettings.difficulty}%, ${theme === 'dark' ? '#374151' : '#e5e7eb'} ${localSettings.difficulty}%, ${theme === 'dark' ? '#374151' : '#e5e7eb'} 100%)` 
                  }}
                />
                <p className="text-xs text-gray-500 mt-2">{getDifficultyDescription(localSettings.difficulty)}</p>
              </div>

              <div>
                <label className="block mb-2 font-medium">Antal ledetråde</label>
                <input
                  type="number"
                  value={localSettings.numberOfClues}
                  onChange={e => {
                    const value = parseInt(e.target.value) || 1;
                    handleLocalChange('numberOfClues', value);
                  }}
                  className="w-full px-3 py-2 rounded-lg bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 text-center"
                />
              </div>

              <div>
                <label className="block mb-2 font-medium">Tilpasset tema (valgfrit)</label>
                <input
                  type="text"
                  value={localSettings.customTheme}
                  onChange={e => handleLocalChange('customTheme', e.target.value)}
                  placeholder='f.eks. "Film og serier", "Dansk historie"'
                  className="w-full px-3 py-2 rounded-lg bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600"
                />
              </div>

              <label className="flex items-center justify-between p-3 rounded-lg bg-gray-50 dark:bg-gray-700/50">
                <div className="flex items-center gap-2">
                  <Clock className="w-4 h-4" />
                  <span className="font-medium">Tidsgrænse</span>
                </div>
                <button
                  onClick={() => handleLocalChange('enableTimer', !localSettings.enableTimer)}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-all ${
                    localSettings.enableTimer ? 'bg-green-500' : 'bg-gray-300'
                  }`}
                >
                  <span className={`inline-block h-4 w-4 rounded-full bg-white transform transition-transform ${
                    localSettings.enableTimer ? 'translate-x-6' : 'translate-x-1'
                  }`} />
                </button>
              </label>

              {localSettings.enableTimer && (
                <div>
                  <label className="block mb-2 text-sm font-medium">Sekunder per ledetråd</label>
                  <input
                    type="number"
                    value={localSettings.timePerClue}
                    onChange={e => {
                      const value = parseInt(e.target.value) || 1;
                      handleLocalChange('timePerClue', value);
                    }}
                    className="w-full px-3 py-2 rounded-lg bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 text-center"
                  />
                </div>
              )}
            </div>
          </section>

          {/* Categories */}
          <section className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-semibold flex items-center gap-2">
                <Grid className="w-5 h-5" />
                Kategorier
              </h2>
              <button
                onClick={() => setShowAddCategory(true)}
                className="flex items-center gap-2 px-3 py-1.5 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm transition-colors"
              >
                <Plus className="w-4 h-4" />
                Tilføj kategori
              </button>
            </div>

            <div className="space-y-2">
              {Object.entries(localSettings.categories).map(([key, category]) => (
                <div 
                  key={key} 
                  className="flex items-center justify-between p-3 rounded-lg bg-gray-50 dark:bg-gray-700/50"
                >
                  <div>
                    <p className="font-medium">{category.name}</p>
                    <p className="text-sm text-gray-500">{category.description}</p>
                  </div>
                  {category.custom && (
                    <button
                      onClick={() => handleRemoveCategory(key)}
                      className="p-1.5 rounded-lg hover:bg-red-100 dark:hover:bg-red-900/20 text-red-600 transition-colors"
                    >
                      <X className="w-4 h-4" />
                    </button>
                  )}
                </div>
              ))}
            </div>

            {showAddCategory && (
              <div className="mt-4 p-4 rounded-lg bg-gray-50 dark:bg-gray-700/50">
                <h3 className="font-medium mb-3">Ny kategori</h3>
                <div className="space-y-3">
                  <input
                    type="text"
                    placeholder="Kategori ID (f.eks. 'sport')"
                    value={newCategory.key}
                    onChange={e => setNewCategory(prev => ({ ...prev, key: e.target.value.toLowerCase().replace(/\s/g, '_') }))}
                    className="w-full px-3 py-2 rounded-lg bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600"
                  />
                  <input
                    type="text"
                    placeholder="Kategori navn (f.eks. 'Sport')"
                    value={newCategory.name}
                    onChange={e => setNewCategory(prev => ({ ...prev, name: e.target.value }))}
                    className="w-full px-3 py-2 rounded-lg bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600"
                  />
                  <input
                    type="text"
                    placeholder="Beskrivelse (valgfrit)"
                    value={newCategory.description}
                    onChange={e => setNewCategory(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 rounded-lg bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600"
                  />
                  <div className="flex gap-2">
                    <button
                      onClick={handleAddCategory}
                      className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors"
                    >
                      Tilføj
                    </button>
                    <button
                      onClick={() => {
                        setShowAddCategory(false);
                        setNewCategory({ key: '', name: '', description: '' });
                      }}
                      className="px-4 py-2 bg-gray-300 dark:bg-gray-600 hover:bg-gray-400 dark:hover:bg-gray-500 rounded-lg transition-colors"
                    >
                      Annuller
                    </button>
                  </div>
                </div>
              </div>
            )}
          </section>

          {/* Data Management */}
          <section className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg">
            <h2 className="text-xl font-semibold mb-4">Data håndtering</h2>
            
            <div className="space-y-4">
              <div className="p-3 rounded-lg bg-gray-50 dark:bg-gray-700/50">
                <div className="flex items-center justify-between mb-2">
                  <span className="font-medium">Brugte kort</span>
                  <span className="text-2xl font-bold">{usedItems.length}</span>
                </div>
                <button
                  onClick={() => {
                    if (window.confirm('Er du sikker på at du vil nulstille alle brugte kort?')) {
                      resetUsedItems();
                    }
                  }}
                  className="w-full mt-2 py-2 px-4 bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors"
                >
                  Nulstil brugte kort
                </button>
              </div>

              <button
                onClick={() => {
                  if (window.confirm('ADVARSEL: Dette vil slette ALLE data inklusiv indstillinger og brugte kort. Er du helt sikker?')) {
                    resetAllData();
                  }
                }}
                className="w-full py-3 px-4 bg-red-500 hover:bg-red-600 text-white font-medium rounded-lg transition-colors flex items-center justify-center gap-2"
              >
                <Trash2 className="w-4 h-4" />
                Slet alle data
              </button>
            </div>
          </section>
        </div>
      </div>
    </div>
  );
};

export default SettingsPage;
</file>

<file path="src/components/Timer.js">
import React, { useState, useEffect } from 'react';
import { Clock, AlertCircle } from 'lucide-react';

const Timer = ({ timePerClue, onTimeUp, isPaused, resetTrigger }) => {
  const [timeLeft, setTimeLeft] = useState(timePerClue);
  const [isTimeUp, setIsTimeUp] = useState(false);
  
  // Reset timer when resetTrigger changes (new clue revealed)
  useEffect(() => {
    setTimeLeft(timePerClue);
    setIsTimeUp(false);
  }, [resetTrigger, timePerClue]);
  
  useEffect(() => {
    if (isPaused || isTimeUp) return;
    
    const interval = setInterval(() => {
      setTimeLeft(prev => {
        if (prev <= 1) {
          setIsTimeUp(true);
          onTimeUp();
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
    
    return () => clearInterval(interval);
  }, [timePerClue, onTimeUp, isPaused, isTimeUp]);
  
  const percentage = (timeLeft / timePerClue) * 100;
  const isLow = timeLeft <= 5 && timeLeft > 0;
  
  if (isTimeUp) {
    return (
      <div className="w-full mb-4 p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-700 rounded-lg">
        <div className="flex items-center justify-center gap-2 text-red-600 dark:text-red-400">
          <AlertCircle className="w-5 h-5" />
          <span className="font-medium">Tiden er udløbet!</span>
        </div>
      </div>
    );
  }
  
  return (
    <div className="w-full mb-4">
      <div className="flex justify-between items-center mb-1">
        <span className="text-sm font-medium flex items-center gap-1">
          <Clock className="w-3 h-3" />
          Tid tilbage
        </span>
        <span className={`text-sm font-bold ${isLow ? 'text-red-500 animate-pulse' : ''}`}>
          {timeLeft}s
        </span>
      </div>
      <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 overflow-hidden">
        <div 
          className={`h-full transition-all duration-1000 ${
            isLow ? 'bg-red-500' : 'bg-blue-500'
          }`}
          style={{ width: `${percentage}%` }}
        />
      </div>
    </div>
  );
};

export default Timer;
</file>

<file path="src/context/GameContext.js">
import React, { createContext, useContext, useState, useCallback } from 'react';
import { loadFromLocalStorage, saveToLocalStorage } from '../utils/gameLogic';
import { defaultCategories } from '../utils/prompts';

const GameContext = createContext();

export const useGame = () => {
  const context = useContext(GameContext);
  if (!context) {
    throw new Error('useGame must be used within a GameProvider');
  }
  return context;
};

export const GameProvider = ({ children }) => {
  // Game settings
  const [difficulty, setDifficulty] = useState(() => 
    loadFromLocalStorage('difficulty', 50)
  );
  const [customTheme, setCustomTheme] = useState(() =>
    loadFromLocalStorage('customTheme', '')
  );
  const [hideAnswerOnGeneration, setHideAnswerOnGeneration] = useState(() =>
    loadFromLocalStorage('hideAnswerOnGeneration', false)
  );
  const [numberOfClues, setNumberOfClues] = useState(() =>
    loadFromLocalStorage('numberOfClues', 20)
  );
  const [enableTimer, setEnableTimer] = useState(() =>
    loadFromLocalStorage('enableTimer', false)
  );
  const [timePerClue, setTimePerClue] = useState(() =>
    loadFromLocalStorage('timePerClue', 30)
  );
  const [categories, setCategories] = useState(() =>
    loadFromLocalStorage('customCategories', defaultCategories)
  );

  // Game state
  const [usedItems, setUsedItems] = useState(() => 
    loadFromLocalStorage('usedItems', [])
  );
  
  // Current game session state
  const [currentGameState, setCurrentGameState] = useState(() =>
    loadFromLocalStorage('currentGameState', null)
  );

  // Save settings when they change
  const updateSetting = useCallback((key, value) => {
    saveToLocalStorage(key, value);
    switch(key) {
      case 'difficulty': setDifficulty(value); break;
      case 'customTheme': setCustomTheme(value); break;
      case 'hideAnswerOnGeneration': setHideAnswerOnGeneration(value); break;
      case 'numberOfClues': setNumberOfClues(value); break;
      case 'enableTimer': setEnableTimer(value); break;
      case 'timePerClue': setTimePerClue(value); break;
      case 'customCategories': setCategories(value); break;
      default: break;
    }
  }, []);

  const resetUsedItems = useCallback(() => {
    setUsedItems([]);
    localStorage.removeItem('usedItems');
  }, []);

  const addUsedItem = useCallback((category, item) => {
    setUsedItems(prev => {
      const updated = [...prev, { category, item }];
      saveToLocalStorage('usedItems', updated);
      return updated;
    });
  }, []);

  const resetAllData = useCallback(() => {
    localStorage.clear();
    window.location.reload();
  }, []);
  
  // Save current game state
  const saveGameState = useCallback((gameState) => {
    setCurrentGameState(gameState);
    saveToLocalStorage('currentGameState', gameState);
  }, []);
  
  // Clear current game state
  const clearGameState = useCallback(() => {
    setCurrentGameState(null);
    localStorage.removeItem('currentGameState');
  }, []);

  const value = {
    // Settings
    difficulty,
    customTheme,
    hideAnswerOnGeneration,
    numberOfClues,
    enableTimer,
    timePerClue,
    categories,
    updateSetting,
    
    // Game state
    usedItems,
    addUsedItem,
    resetUsedItems,
    resetAllData,
    
    // Current game session
    currentGameState,
    saveGameState,
    clearGameState,
  };

  return <GameContext.Provider value={value}>{children}</GameContext.Provider>;
};
</file>

<file path="src/utils/api.js">
const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';

export const generateCluesWithProgress = async (prompt, callbacks = {}) => {
  const {
    onItemFound = () => {},
    onComplete = () => {},
    onError = () => {}
  } = callbacks;

  try {
    const response = await fetch(`${API_URL}/api/generate-stream`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt,
        max_tokens: 1000,
        temperature: 0.7
      })
    });

    if (!response.ok) {
      throw new Error(`API error: ${response.status} ${response.statusText}`);
    }

    const reader = response.body.getReader();
    const decoder = new TextDecoder();
    let buffer = '';

    while (true) {
      const { done, value } = await reader.read();
      
      if (done) break;
      
      buffer += decoder.decode(value, { stream: true });
      const lines = buffer.split('\n');
      
      // Keep the last incomplete line in the buffer
      buffer = lines.pop() || '';
      
      for (const line of lines) {
        if (line.startsWith('data: ')) {
          const data = line.slice(6);
          
          if (data === '[DONE]') {
            return;
          }
          
          try {
            const event = JSON.parse(data);
            
            switch (event.type) {
              case 'item_found':
                // Call this as soon as we have the item
                onItemFound(event.item);
                break;
                
              case 'complete':
                // Call this when everything is done
                onComplete(event.result);
                return event.result;
                
              case 'error':
                throw new Error(event.error);
            }
          } catch (e) {
            // Ignore JSON parse errors for incomplete data
            if (e.message.includes('JSON')) continue;
            throw e;
          }
        }
      }
    }
  } catch (error) {
    onError(error);
    throw error;
  }
};
</file>

<file path="src/utils/gameLogic.js">
export const shuffleArray = (array) => {
  const newArray = [...array];
  for (let i = newArray.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
  }
  return newArray;
};

export const getUsedItemsInCategory = (usedItems, category) => {
  return usedItems.filter(item => item.category === category).length;
};

export const isSpecialClue = (clue) => {
  return clue.includes('byt plads') || 
         clue.includes('ryk') || 
         clue.includes('gæt');
};

export const saveToLocalStorage = (key, value) => {
  try {
    localStorage.setItem(key, JSON.stringify(value));
  } catch (error) {
    console.error('Error saving to localStorage:', error);
  }
};

export const loadFromLocalStorage = (key, defaultValue) => {
  try {
    const saved = localStorage.getItem(key);
    return saved ? JSON.parse(saved) : defaultValue;
  } catch (error) {
    console.error('Error loading from localStorage:', error);
    return defaultValue;
  }
};
</file>

<file path="src/utils/prompts.js">
import { Brain, MapPin, Lightbulb, Sparkles } from 'lucide-react';

export const categories = {
  person: { 
    name: 'Person', 
    icon: Brain, 
    gradient: 'from-blue-600 to-indigo-700',
    description: 'Berømte personer, karakterer & erhverv'
  },
  sted: { 
    name: 'Sted', 
    icon: MapPin, 
    gradient: 'from-emerald-600 to-teal-700',
    description: 'Geografiske lokationer & steder'
  },
  ting: { 
    name: 'Ting', 
    icon: Lightbulb, 
    gradient: 'from-amber-600 to-orange-700',
    description: 'Objekter, koncepter & idéer'
  },
  begivenhed: { 
    name: 'Begivenhed', 
    icon: Sparkles, 
    gradient: 'from-purple-600 to-pink-700',
    description: 'Historiske begivenheder & øjeblikke'
  }
};

export const getDifficultyLabel = (value) => {
  if (value <= 10) return 'Børneniveau';
  if (value <= 25) return 'Meget let';
  if (value <= 40) return 'Let';
  if (value <= 60) return 'Normal';
  if (value <= 75) return 'Svær';
  if (value <= 90) return 'Meget svær';
  return 'Ekspert';
};

export const getDifficultyDescription = (value) => {
  if (value <= 10) return 'For små børn (3-6 år)';
  if (value <= 25) return 'For børn og begyndere';
  if (value <= 40) return 'Velkendte emner for de fleste';
  if (value <= 60) return 'Standard voksen trivia';
  if (value <= 75) return 'Kræver god almen viden';
  if (value <= 90) return 'Udfordrende selv for vidende';
  return 'Kun for eksperter og specialister';
};

const categoryDescriptions = {
  person: {
    description: 'en berømt person, fiktiv karakter, dyr med personlighed, gruppe eller erhverv',
    examples: {
      1: 'mor, far, hund, kat, baby, lærer',
      10: 'Pippi Langstrømpe, julemanden, Mickey Mouse, politimand, brandmand',
      25: 'Dronning Margrethe, Donald Duck, Harry Potter, Batman, Ronaldo',
      40: 'Einstein, Leonardo da Vinci, Madonna, The Beatles, Sherlock Holmes',
      50: 'Darwin, Beethoven, Van Gogh, Winston Churchill, Cleopatra',
      60: 'Marie Curie, Sokrates, Frida Kahlo, Nikola Tesla, Marco Polo',
      75: 'Niels Bohr, Virginia Woolf, Archimedes, Stradivarius, Dostoyevsky',
      90: 'Ada Lovelace, Ibn Khaldun, Hypatia, Tycho Brahe, Mary Anning',
      100: 'Srinivasa Ramanujan, Hedy Lamarr, Ibn al-Haytham, Lise Meitner'
    }
  },
  sted: {
    description: 'et berømt rejsemål, monument, vartegn, bygning eller naturligt vidunder',
    examples: {
      1: 'hjem, have, legeplads, skov, sø',
      10: 'zoo, svømmehal, strand, bondegård, akvarium',
      25: 'Eiffeltårnet, Frihedsgudinden, Disneyland, Taj Mahal, Stonehenge',
      40: 'Grand Canyon, Colosseum, Niagara Falls, Den Kinesiske Mur, Mount Fuji',
      50: 'Machu Picchu, Angkor Wat, Louvre, Alhambra, Burj Khalifa',
      60: 'Petra, Moai-statuerne, Uluru, Neuschwanstein, Mont Saint-Michel',
      75: 'Socotra, Meteora, Derinkuyu, Borobudur, Pamukkale',
      90: 'Chand Baori, Skellig Michael, Gobekli Tepe, Kiyomizu-dera, Banaue-risterrasserne',
      100: 'Derinkuyu, Gangkhar Puensum, Antelope Canyon, Mount Roraima, Taktsang-klostret'
    }
  },
  ting: {
    description: 'en genstand, koncept, dyr, opfindelse eller fænomen',
    examples: {
      1: 'bold, vand, sol, træ, bil',
      10: 'cykel, is, chokolade, hund, telefon',
      25: 'computer, pizza, elefant, flyvemaskine, fodbold',
      40: 'internet, demokrati, dinosaur, mikroskop, vitamin',
      50: 'DNA, klimaforandringer, kunstig intelligens, antibiotika',
      60: 'kvantemekanik, blockchain, CRISPR, mørkt stof, stamceller',
      75: 'kvantekryptering, epigenetik, neutrino, graphene, Higgs boson',
      90: 'topologiske isolatorer, prioner, kvantesuperposition, metamaterialer',
      100: 'anyoner, skyrmioner, Majorana fermioner, tachyoner'
    }
  },
  begivenhed: {
    description: 'en historisk begivenhed, opdagelse, opfindelse eller vigtigt øjeblik',
    examples: {
      1: 'fødseldag, jul, sommer, nat, morgen',
      10: 'nytår, påske, første skoledag, VM i fodbold',
      25: 'månelandingen, OL, opdagelsen af Amerika, Titanic synker',
      40: 'Berlinmurens fald, 2. verdenskrig, internettet opfindes, 9/11',
      50: 'Den franske revolution, renæssancen, industrielle revolution',
      60: 'Sorte Død, opdagelsen af penicillin, Magna Carta, Reformationen',
      75: 'Vestfalske fred, Rosettastenen findes, DNA-struktur opdages',
      90: 'Carrington Event, År uden sommer 1816, Tunguska-eksplosionen',
      100: 'Toba-udbruddet, Younger Dryas, Kambrium eksplosionen'
    }
  }
};

const difficultyDescriptions = {
  1: 'ekstrem begynderniveau - for de allermindste børn (3-4 år), kun de mest basale koncepter',
  10: 'børneniveau - velkendt for børn i 5-8 års alderen',
  25: 'let niveau - kendt af næsten alle, inklusiv børn',
  40: 'under middel - ret velkendt for de fleste voksne',
  50: 'middelniveau - standard voksen trivia, kræver almindelig almen viden',
  60: 'over middel - kræver god almen viden eller interesse for emnet',
  75: 'svært niveau - kræver omfattende viden eller specialinteresse',
  90: 'meget svært - kun kendt af folk med dyb viden inden for området',
  100: 'ekspertniveau - ekstremt obskurt, kendt af meget få mennesker'
};

export const getPrompt = (category, difficulty, usedItems, customTheme = '', numberOfClues = 20) => {
  // Find the closest difficulty example
  const difficultyKeys = Object.keys(categoryDescriptions[category].examples).map(Number);
  const closestDifficulty = difficultyKeys.reduce((prev, curr) => 
    Math.abs(curr - difficulty) < Math.abs(prev - difficulty) ? curr : prev
  );

  const categoryInfo = categoryDescriptions[category];
  const examples = categoryInfo.examples[closestDifficulty];
  const usedInCategory = usedItems
    .filter(item => item.category === category)
    .map(item => item.item);

  // Find closest difficulty description
  const descriptionKeys = Object.keys(difficultyDescriptions).map(Number);
  const closestDescriptionKey = descriptionKeys.reduce((prev, curr) => 
    Math.abs(curr - difficulty) < Math.abs(prev - difficulty) ? curr : prev
  );

  const themeSection = customTheme 
    ? `\nVIGTIGT TEMA: Alle emner SKAL relatere til "${customTheme}". 
Vælg kun emner der passer til dette tema OG den valgte kategori.
Hvis temaet er for specifikt til at finde ${categoryInfo.description} på det givne sværhedsniveau, så tilpas sværheden en smule men hold dig til temaet.\n`
    : '';

  return `Du er vært for et ${numberOfClues} Questions spil. Din opgave er at vælge ${categoryInfo.description} som er ${difficultyDescriptions[closestDescriptionKey]}.

KATEGORI: ${categories[category].name}
SVÆRHEDSGRAD: ${difficulty}% (${getDifficultyLabel(difficulty)})
${themeSection}
EKSEMPLER på passende emner for denne sværhedsgrad:
${examples}

MEGET VIGTIGT - ALLEREDE BRUGTE EMNER I DENNE KATEGORI:
${usedInCategory.length > 0 ? usedInCategory.join(', ') : 'Ingen brugte emner i denne kategori endnu'}

Du MÅ ABSOLUT IKKE vælge noget der allerede er brugt!

REGLER FOR VALG AF EMNE:
1. Emnet SKAL matche sværhedsgraden præcist (${difficulty}%)
   - 1%: Ekstrem begynder (3-4 år) - kun de mest basale ting
   - 10%: Børneniveau (5-8 år) 
   - 25%: Let - kendt af næsten alle
   - 50%: Middel - standard voksen trivia
   - 75%: Svær - kræver god viden
   - 90%: Meget svær - kun for vidende
   - 100%: Ekspert - ekstremt obskurt
2. ${customTheme ? `Emnet SKAL relatere til temaet "${customTheme}"` : 'Emnet skal være internationalt relevant'}
3. Emnet MÅ IKKE være på listen over brugte emner
4. Match sværheden fra eksemplerne præcist

MEGET VIGTIGT FOR LEDETRÅDE:
- Tilpas ledetrådenes sværhed til målgruppen:
  * 1-25%: Simple, konkrete ledetråde med basale ord
  * 50%: Standard trivia-niveau ledetråde  
  * 75-100%: Komplekse ledetråde der kræver specialviden
- Hver ledetråd skal være HELT UAFHÆNGIG af de andre
- Bland forskellige typer hints
- Undgå åbenlyse sammenhænge mellem ledetråde

Special-ledetråde (KUN hvis sværhed > 20%):
- Hvis sværhed > 20%, vælg 3 TILFÆLDIGE positioner mellem 1-${numberOfClues}
- Indsæt disse special-ledetråde:
  • "byt plads med forreste"
  • "ryk 3 felter frem"
  • "Du har 2 gæt"

Svar KUN med følgende JSON format:
{
  "item": "det valgte emne",
  "clues": [${numberOfClues} ledetråde${difficulty > 20 ? ' med præcis 3 special-ledetråde på tilfældige positioner' : ' uden special-ledetråde'}]
}
Respond ONLY with valid JSON. Do not include any markdown or explanations.`;
};

export const defaultCategories = categories;
</file>

<file path="src/App.css">
.App {
  min-height: 100vh;
}

/* Slider custom styling */
.slider {
  -webkit-appearance: none;
  appearance: none;
  background: transparent;
  cursor: pointer;
}

.slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 20px;
  height: 20px;
  background: #3b82f6;
  cursor: pointer;
  border-radius: 50%;
  transition: all 0.2s;
}

.slider::-webkit-slider-thumb:hover {
  transform: scale(1.2);
  background: #2563eb;
}

.slider::-moz-range-thumb {
  width: 20px;
  height: 20px;
  background: #3b82f6;
  cursor: pointer;
  border-radius: 50%;
  border: none;
  transition: all 0.2s;
}

.slider::-moz-range-thumb:hover {
  transform: scale(1.2);
  background: #2563eb;
}

/* Loading pulse */
@keyframes pulse {
  0%, 100% {
    opacity: 0.4;
  }
  50% {
    opacity: 1;
  }
}

.pulse {
  animation: pulse 1.5s ease-in-out infinite;
}

/* Loading bounce */
@keyframes bounce {
  0%, 100% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-10px);
  }
}

.animate-bounce {
  animation: bounce 0.6s ease-in-out infinite;
}

/* Loading spin */
@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.animate-spin {
  animation: spin 2s linear infinite;
}

/* Pulse animation */
.animate-pulse {
  animation: pulse 1.5s ease-in-out infinite;
}

/* Smooth transitions */
* {
  transition: background-color 0.2s ease, 
              border-color 0.2s ease,
              color 0.2s ease;
}

/* Focus styles */
:focus {
  outline: none;
}

:focus-visible {
  outline: 2px solid #3b82f6;
  outline-offset: 2px;
}

/* Button press effect */
button:active {
  transform: scale(0.98);
}

/* Custom scrollbar for dark theme */
::-webkit-scrollbar {
  width: 10px;
  height: 10px;
}

::-webkit-scrollbar-track {
  background: #1f2937;
  border-radius: 5px;
}

::-webkit-scrollbar-thumb {
  background: #4b5563;
  border-radius: 5px;
}

::-webkit-scrollbar-thumb:hover {
  background: #6b7280;
}

/* Firefox scrollbar */
* {
  scrollbar-width: thin;
  scrollbar-color: #4b5563 #1f2937;
}

/* Responsive font sizes */
@media (max-width: 768px) {
  html {
    font-size: 14px;
  }
}

/* Print styles */
@media print {
  body {
    background: white;
    color: black;
  }
  
  .no-print {
    display: none !important;
  }
}
</file>

<file path="src/App.js">
import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import './App.css';
import Game from './components/Game';
import SettingsPage from './components/SettingsPage';
import { GameProvider } from './context/GameContext';
import { loadFromLocalStorage } from './utils/gameLogic';

function App() {
  const [theme, setTheme] = useState(() => 
    loadFromLocalStorage('theme', 'dark')
  );

  useEffect(() => {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
      document.body.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
      document.body.classList.remove('dark');
    }
  }, [theme]);

  return (
    <GameProvider>
      <Router>
        <div className="App">
          <Routes>
            <Route path="/" element={<Game theme={theme} setTheme={setTheme} />} />
            <Route path="/settings" element={<SettingsPage theme={theme} setTheme={setTheme} />} />
            <Route path="*" element={<Navigate to="/" />} />
          </Routes>
        </div>
      </Router>
    </GameProvider>
  );
}

export default App;
</file>

<file path="src/index.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Light mode */
body {
  background-color: #f9fafb;
}

/* Dark mode */
body.dark {
  background-color: #111827;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

/* Custom scrollbar for dark theme */
::-webkit-scrollbar {
  width: 10px;
  height: 10px;
}

::-webkit-scrollbar-track {
  background: #1f2937;
  border-radius: 5px;
}

::-webkit-scrollbar-thumb {
  background: #4b5563;
  border-radius: 5px;
}

::-webkit-scrollbar-thumb:hover {
  background: #6b7280;
}

/* Firefox scrollbar */
* {
  scrollbar-width: thin;
  scrollbar-color: #4b5563 #1f2937;
}

/* Smooth scroll behavior */
html {
  scroll-behavior: smooth;
}
</file>

<file path="src/index.js">
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
</file>

<file path=".env.production">
REACT_APP_API_URL=https://20-questions-backend.vercel.app
</file>

<file path=".gitignore">
# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Environment variables
.env
</file>

<file path="package.json">
{
  "name": "20-questions-enhanced",
  "version": "2.0.0",
  "description": "Enhanced 20 Questions game with improved randomization and single-page experience",
  "private": true,
  "author": "Your Name",
  "license": "MIT",
  "dependencies": {
    "@huggingface/inference": "^4.0.3",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.9.0",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^5.1.0",
    "lucide-react": "^0.263.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.26.0",
    "react-scripts": "5.0.1",
    "replicate": "^1.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "server": "node server.js",
    "dev": "concurrently \"npm run start\" \"npm run server\"",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "test:coverage": "react-scripts test --coverage --watchAll=false",
    "test:utils": "react-scripts test src/utils",
    "test:components": "react-scripts test src/components",
    "eject": "react-scripts eject",
    "predeploy": "npm run build",
    "deploy": "gh-pages -d build",
    "analyze": "source-map-explorer 'build/static/js/*.js'",
    "lint": "eslint src --ext .js,.jsx",
    "lint:fix": "eslint src --ext .js,.jsx --fix",
    "format": "prettier --write \"src/**/*.{js,jsx,json,css,md}\"",
    "clean": "rm -rf build node_modules package-lock.json && npm install",
    "check-env": "node -e \"console.log('API Key:', process.env.REACT_APP_HF_API_KEY ? '✓ Set' : '✗ Missing')\"",
    "reset-data": "node -e \"console.log('Clearing localStorage...'); localStorage && localStorage.clear(); console.log('Done!')\"",
    "generate-icons": "npx pwa-asset-generator public/logo.svg public/icons",
    "build:pwa": "npm run build && npx workbox generateSW workbox-config.js",
    "validate": "npm run lint && npm run test:coverage && npm run build"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ],
    "rules": {
      "no-unused-vars": "warn",
      "react/prop-types": "off"
    }
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "autoprefixer": "^10.4.14",
    "concurrently": "^9.1.2",
    "eslint": "^8.48.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-react": "^7.33.2",
    "gh-pages": "^6.0.0",
    "postcss": "^8.4.24",
    "prettier": "^3.0.0",
    "source-map-explorer": "^2.5.3",
    "tailwindcss": "^3.3.0",
    "workbox-cli": "^7.0.0"
  },
  "proxy": "http://localhost:3001",
  "homepage": "https://lukasjp11.github.io/20-questions"
}
</file>

<file path="postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="tailwind.config.js">
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  darkMode: 'class',
  theme: {
    extend: {},
  },
  plugins: [],
}
</file>

</files>
